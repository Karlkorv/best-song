@page "/"
@using Blazored.LocalStorage
@using SpotifyAPI.Web
@using best_song.Data
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject ILogger<Playlist> Logger;
@inject ILocalStorageService Storage
@inject Tournament<FullTrack> Trn;
@inject Spotify Spotify

<body>
<h3>Input Playlist</h3>
<EditForm Model="@_plf" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <InputText id="playlist" @bind-Value="_plf.InputUrl"></InputText>
</EditForm>
</body>

@code
{
    private class PlaylistForm
    {
        [Required] internal string? InputUrl;
    }

    private readonly PlaylistForm _plf = new();

    private async void HandleSubmit()
    {
        try
        {
            Logger.Log(LogLevel.Information, "Playlist submitted");
            if (_plf.InputUrl == null)
            {
                Logger.Log(LogLevel.Information, "Input is null");
                return;
            }
            var playList = await Spotify.GetPlayList(_plf.InputUrl);
            if (playList.Count == 0)
            {
                Logger.Log(LogLevel.Error, "Playlist link invalid, list is empty");
            }
            Logger.Log(LogLevel.Information, "Playlist is valid");
            Trn.AddEntries(playList);
            Logger.Log(LogLevel.Information, "Playlist submitted to tournament");
            NavigationManager.NavigateTo(NavigationManager.ToAbsoluteUri("tournament").ToString());
        }
        catch (APIException e)
        {
            Console.WriteLine(e); // Behöver error handling här hjälp
        }
    }
}