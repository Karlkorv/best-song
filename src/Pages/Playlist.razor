@OnAfterRenderAsync(true)
@page "/"
@using best_song.Data
@using SpotifyAPI.Web
@inject ILogger<Playlist> Logger;
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Tournament<FullTrack> Trn;
@inject Spotify Spotify
@if (Storage.GetItemAsync<bool>("validPlaylist").Result)
{
    <h3>Input Playlist</h3>
    <form>
        <input id="playlistSubmit" type="url" @bind="_input"  placeholder="Enter playlist url" onsubmit="@HandleSubmit()"/>
    </form>
}
else
{
    <h1>Valid playlist submitted</h1>
    <form>
        <button class="songButton" id="firstButton" @bind="_firstSong">
            @Trn.CurrentMatchUp[0].Name
        </button>
        <button class="songButton" id="secondButton" @bind="_secondSong">
            @Trn.CurrentMatchUp[1].Name
        </button>
    </form>
    
    <div class songDisplay>
        <audio controls><source src="@Trn.CurrentMatchUp[0].PreviewUrl"/>Your browser does not support the audio element</audio>
    </div>
}

@code
{
    private bool _firstSong;
    private bool _secondSong;
    private string _input = string.Empty;

    private async Task<string> HandleSubmit()
    {
        try
        {
            Logger.Log(LogLevel.Information, "Playlist submitted");
            var playList = await Spotify.GetPlayList(_input);
            if (playList.Count == 0)
            {
                _input = string.Empty;
                return "bad";
            }
            Logger.Log(LogLevel.Information, "Playlist is valid");
            await Storage.SetItemAsync("validPlaylist", true);
            Trn.AddEntries(playList);
            Logger.Log(LogLevel.Information, "Playlist submitted to tournament");
            StateHasChanged();
            return "good";
        }
        catch (APIException e)
        {
            Console.WriteLine(e);
            return "bad";
        }
    }
}