@page "/"
@using best_song.Data
@using SpotifyAPI.Web
@inject ILogger<Playlist> _logger;
@inject Tournament<FullTrack> trn;
@inject Spotify spotify
@if (!_validPlaylist)
{
    <h3>Input Playlist</h3>
    <form>
        <input id="playlistSubmit" type="url" @bind="_input"  placeholder="Enter playlist url" onsubmit="@HandleSubmit()"/>
    </form>
}
else
{
    <h1>Valid playlist submitted</h1>
    <form>
        <button class="songButton" id="firstButton" @bind="_firstSong" onclick="">@trn.CurrentMatchUp[0].Name</button>
        <button class="songButton" id="secondButton" @bind="_secondSong">@trn.CurrentMatchUp[1].Name</button>
    </form>
}


@code
{
    private bool _validPlaylist;
    private bool _firstSong;
    private bool _secondSong;
    private string _input = string.Empty;

    private async Task<string> HandleSubmit()
    {
        try
        {
            _logger.Log(LogLevel.Information, "Playlist submitted");
            var playList = await spotify.GetPlayList(_input);
            if (playList.Count == 0)
            {
                _input = string.Empty;
                return "bad";
            }
            _logger.Log(LogLevel.Information, "Playlist is valid");
            _validPlaylist = true;
            trn.AddEntries(playList);
            _logger.Log(LogLevel.Information, "Playlist submitted to tournament");
            StateHasChanged();
            return "good";
        }
        catch (APIException e)
        {
            _input = string.Empty;
            Console.WriteLine(e);
            return "bad";
        }
    }
}